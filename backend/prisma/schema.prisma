// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  avatar    String?
  bio       String?  @db.Text
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  pets         Pet[]
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  predictions  Prediction[]
  
  // Relaciones médicas (solo para veterinarios)
  appointments Appointment[] @relation("VeterinarianAppointments")
  medicalRecords MedicalRecord[] @relation("VeterinarianRecords")

  @@map("users")
}

model Pet {
  id        Int      @id @default(autoincrement())
  name      String
  age       Int?
  breed     String
  species   Species  @default(DOG)
  photoUrl  String?
  weight    Float?
  color     String?
  gender    Gender?
  isActive  Boolean  @default(true)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relaciones
  events         Event[]
  posts          Post[]
  predictions    Prediction[]
  medicalRecords MedicalRecord[]
  appointments   Appointment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([species])
  @@map("pets")
}

model Event {
  id        Int       @id @default(autoincrement())
  type      EventType
  date      DateTime
  notes     String?   @db.Text
  petId     Int
  pet       Pet       @relation(fields: [petId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([petId])
  @@map("events")
}

enum EventType {
  VET
  WALK
  FOOD
  GROOMING
  TRAINING
  VACCINATION
  MEDICATION
  CHECKUP
  EMERGENCY
  OTHER
}

enum UserRole {
  USER
  ADMIN
  VETERINARIAN
  MODERATOR
}

enum Species {
  DOG
  CAT
  BIRD
  RABBIT
  OTHER
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Modelo para posts sociales
model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  imageUrl  String?
  userId    Int
  petId     Int?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet       Pet?     @relation(fields: [petId], references: [id], onDelete: SetNull)
  
  // Relaciones sociales
  comments  Comment[]
  likes     Like[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([petId])
  @@map("posts")
}

// Modelo para comentarios
model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  userId    Int
  postId    Int
  parentId  Int?     // Para comentarios anidados (respuestas)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
  @@index([parentId])
  @@map("comments")
}

// Modelo para likes
model Like {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@map("likes")
}

// Modelo para predicciones (analytics)
model Prediction {
  id          Int      @id @default(autoincrement())
  imageUrl    String
  species     Species
  breed       String
  confidence  Float
  topBreeds   Json     // Array de top 5 predicciones
  modelInfo   Json     // Información del modelo usado
  userId      Int
  petId       Int?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet         Pet?     @relation(fields: [petId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([petId])
  @@index([species])
  @@map("predictions")
}

// Modelo para citas médicas
model Appointment {
  id            Int               @id @default(autoincrement())
  date          DateTime
  duration      Int               // Duración en minutos
  reason        String
  notes         String?           @db.Text
  status        AppointmentStatus @default(SCHEDULED)
  petId         Int
  veterinarianId Int
  pet           Pet              @relation(fields: [petId], references: [id], onDelete: Cascade)
  veterinarian  User             @relation("VeterinarianAppointments", fields: [veterinarianId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([petId])
  @@index([veterinarianId])
  @@index([date])
  @@map("appointments")
}

// Modelo para historiales médicos
model MedicalRecord {
  id            Int      @id @default(autoincrement())
  diagnosis     String
  treatment     String   @db.Text
  medications   String?  @db.Text
  notes         String?  @db.Text
  attachments   Json?    // URLs de archivos adjuntos
  petId         Int
  veterinarianId Int
  pet           Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  veterinarian  User     @relation("VeterinarianRecords", fields: [veterinarianId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([petId])
  @@index([veterinarianId])
  @@map("medical_records")
}
